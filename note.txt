analise a estrutura atual e complete # django_app/modules/v1/places/admin.py  from django.contrib import admin from django.contrib.gis.admin import OSMGeoAdmin from .models import Place  @admin.register(Place) class PlaceAdmin(OSMGeoAdmin):     list_display = ('name', 'type', 'status', 'city', 'country', 'created_at')     list_filter = ('type', 'status', 'city', 'country')     search_fields = ('name', 'city', 'state', 'country')     ordering = ('-created_at',)      # django_app/modules/v1/places/api.py  from rest_framework.response import Response from rest_framework import status, viewsets from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from .services import PlaceService  # find_one, find_all, create_one, create_many, update_one, update_many, remove_one, remove_many, search, semantic_search, filter, find_by_id, find_by_ids, exists_by_id, exists_by_ids,   # g_near, g_within_box, g_within_polygon, g_along_line, g_wkt, g_distance, g_buffer, g_intersects, g_contains, g_centroid, g_convex_hull, g_cluster, g_k_nearest, g_path_snap  place_service = PlaceService()  class PlaceViewSet(viewsets.ModelViewSet):     """ViewSet for place actions."""      permission_classes = [IsAuthenticated]          @action(detail=False, methods=['get'], permission_classes=[IsAuthenticated])     def find_one(self, request):         result = place_service.find_one(request.query_params)         if result:             return Response(result, status=status.HTTP_200_OK)           return Response({"detail": "User not found"}, status=status.HTTP_404_NOT_FOUND) # django_app/modules/v1/places/apps.py  from django.apps import AppConfig  class PlacesConfig(AppConfig):     default_auto_field = 'django.db.models.BigAutoField'     name = 'django_app.modules.v1.places'     label = 'places'      verbose_name = 'Places'   # django_app/modules/v1/places/models.py  import uuid from django.contrib.gis.db import models from django.contrib.gis.geos import Point  class Place(models.Model):     class PlaceStatus(models.IntegerChoices):         ACTIVE = 0, 'Active'         INACTIVE = 1, 'Inactive'      class PlaceType(models.IntegerChoices):         BAR = 0, 'Bar'         PUB = 1, 'Pub'         RESTAURANT = 2, 'Restaurant'         CAFE = 3, 'Cafe'         NIGHTCLUB = 4, 'Nightclub'         BREWERY = 5, 'Brewery'         WINERY = 6, 'Winery'         FOOD_TRUCK = 7, 'Food Truck'         COCKTAIL_BAR = 8, 'Cocktail Bar'         SPORTS_BAR = 9, 'Sports Bar'         LOUNGE = 10, 'Lounge'         ROOFTOP_BAR = 11, 'Rooftop Bar'              uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)     name = models.CharField(max_length=255)     slug = models.SlugField(max_length=250, unique=True)     description = models.TextField(blank=True, null=True)     address = models.CharField(max_length=255, blank=True, null=True)     city = models.CharField(max_length=100, blank=True, null=True)     state = models.CharField(max_length=100, blank=True, null=True)     country = models.CharField(max_length=100, blank=True, null=True)     postal_code = models.CharField(max_length=20, blank=True, null=True)      location = models.PointField(geography=True, srid=4326)      website = models.URLField(max_length=255, blank=True, null=True)     phone = models.CharField(max_length=50, blank=True, null=True)     email = models.EmailField(blank=True, null=True)      type = models.IntegerField(choices=PlaceType.choices, default=PlaceType.BAR)     status = models.IntegerField(choices=PlaceStatus.choices, default=PlaceStatus.ACTIVE)      created_at = models.DateTimeField(auto_now_add=True)     updated_at = models.DateTimeField(auto_now=True)      def __str__(self):         return f'{self.name} ({self.get_type_display()})'          def latitude(self):         return self.location.y if self.location else None          def longitude(self):         return self.location.x if self.location else None          def set_location(self, lat, lng):         self.location = Point(lng, lat, srid=4326)      class Meta:         db_table = 'places' # django_app/modules/v1/places/repositories.py  # find_one, find_all, create_one, create_many, update_one, update_many, remove_one, remove_many, search, filter, find_by_id, find_by_ids, exists_by_id, exists_by_ids  class PlaceRepository:     def find_one(self, params):         pass # django_app/modules/v1/places/serializers.py  from rest_framework_gis import serializers from rest_framework import serializers from .models import Place  class PlaceSerializer(serializers.GeoFeatureModelSerializer):      latitude = serializers.FloatField(source='location.y', read_only=True)     longitude = serializers.FloatField(source='location.x', read_only=True)      class Meta:         model = Place         geo_field = "location"         fields = ('id', 'name', 'slug', 'description', 'address', 'city', 'state', 'country', 'postal_code',                   'website', 'phone', 'email', 'type', 'get_type_display', 'status', 'get_status_display',                   'created_at', 'updated_at', 'latitude', 'longitude')  # django_app/modules/v1/places/services.py  from .repositories import PlaceRepository  # find_one, find_all, create_one, create_many, update_one, update_many, remove_one, remove_many, search, filter, find_by_id, find_by_ids, exists_by_id, exists_by_ids  class PlaceService:     def __init__(self):       self.repository = PlaceRepository()      def find_one(self, params):         place = self.repository.find_one(params)         return place # django_app/modules/v1/places/urls.py

from rest_framework.routers import DefaultRouter

from .api import PlaceViewSet

router = DefaultRouter()
router.register(r'', PlaceViewSet,  basename='places')

urlpatterns = router.urls